#include "stdlib.h"
#include <string.h>

@generic Array V

typedef struct {
	size_t size;
	V *elements;
} T;

void T##Init(T *self) {
	*self = (T){0, NULL};
}

void T##InitWithCapacity(T *self, size_t capacity) {
	*self = (T){0, malloc(capacity)};
}

size_t T##GetCapacity(T *self) {
	return malloc_size(self) / sizeof(V);
}

bool T##Append(T *self, V *value) {
	if (self->size + 1 > T##GetCapacity(self)) {
		V *newElements = realloc(self->elements, (self->size + 1) * sizeof(V));
		if (!newElements)
			return false;

		self->elements = newElements;
	}

	memcpy(self->elements + self->size, value, sizeof(V));

	self->size++;

	return true;
}

@end
